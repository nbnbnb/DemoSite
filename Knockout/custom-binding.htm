<!DOCTYPE HTML>
<html lang="en-US">
<head>
    <meta charset="UTF-8">
    <title>Knockout Tutorial Custom-Binding</title>
    <link href="/Styles/Site.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="/Scripts/jquery-1.8.0.js"></script>
    <script type="text/javascript" src="/Scripts/knockout-2.2.0.debug.js"></script>

</head>
<body>
    <div id="div_message"></div>
    <div class="page">
        <div class="header"></div>

        <div class="main">
            <div data-bind="slideVisible: giftWrap, slideDuration:600">You have selected the option</div>
            <label><input type="checkbox" data-bind="checked: giftWrap" /> Gift wrap</label>

            <p>Name: <input data-bind="hasFocus: editingName" /></p>
            <!-- Showing that we can both read and write the focus state -->
            <div data-bind="visible: editingName">You're editing the name</div>
            <button data-bind="enable: !editingName(), click:function() { editingName(true) }">Edit name</button>
 

        </div>


        <script type="text/javascript">

            // init 中可以设置DOM元素的初始化状态，并且绑定事件

            // 用户自定义函数
            ko.bindingHandlers.slideVisible = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    // This will be called when the binding is first applied to an element
                    // Set up any initial state, event handlers, etc. here
                },
                update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    // This will be called once when the binding is first applied to an element,
                    // and again whenever the associated observable changes value.
                    // Update the DOM element based on the supplied values here.

                    // First get the latest data that we're bound to
                    var value = valueAccessor(), allBindings = allBindingsAccessor();

                    // Next, whether or not the supplied model property is observable, get its current value
                    var valueUnwrapped = ko.utils.unwrapObservable(value);

                    // Grab some more data from another binding property
                    var duration = allBindings.slideDuration || 400; // 400ms is default duration unless otherwise specified

                    // Now manipulate the DOM element
                    if (valueUnwrapped == true)
                        $(element).slideDown(duration); // Make the element visible
                    else
                        $(element).slideUp(duration);   // Make the element invisible

                }
            };

            ko.bindingHandlers.hasFocus = {
                init: function (element, valueAccessor) {
                    $(element).focus(function () {
                        var value = valueAccessor();
                        value(true);
                    });
                    $(element).blur(function () {
                        var value = valueAccessor();
                        value(false);
                    });
                },
                update: function (element, valueAccessor) {
                    var value = valueAccessor();
                    if (ko.utils.unwrapObservable(value))
                        element.focus();
                    else
                        element.blur();
                }
            };

            var viewModel = {
                giftWrap: ko.observable(true),
                editingName: ko.observable()
            };
            ko.applyBindings(viewModel);

            // 页面加载时执行
            $(function () {
                // 加载导航条
                $(".header").load("/navigator.htm .header #div_nav", function () { });

            });

            // Event Bind
            $(function () {

            });

        </script>

    </div>
</body>
</html>
