<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>ajaxPrefilter</title>
    <link href="/Styles/Site.css" rel="stylesheet" type="text/css" />
    <link href="/Styles/ui-darkness/jquery-ui-1.8.19.custom.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="/Scripts/unit-common.js"></script>
    <script type="text/javascript" src="/Scripts/ZJinLib.js"></script>
    <script type="text/javascript" src="/Scripts/jquery-1.8.0.js"></script>
    <script type="text/javascript" src="/Scripts/jquery-ui-1.8.19.custom.min.js"></script>

    <style type="text/css">
        div#div_message {
        }
    </style>

</head>
<body>
    <div id="div_message"></div>
    <div class="page">
        <div class="header"></div>

        <div class="main">
            <input type="button" id="button_DoIt" value="DoIt" />

            <div id="hello"></div>

        </div>



        <script type="text/javascript">

            // 用户自定义函数

            // 页面加载时执行
            $(function () {
                // 加载导航条
                $(".header").load("/navigator.htm .header #div_nav");

                // 设置按钮的jQuery样式
                $("input[type='button']").button();
            });

            // Event Bind
            $(function () {

                $.ajaxSetup({
                    abortOnRetry: true
                });

                $("#button_DoIt").bind("click", function () {

                    $.get('http://www.zhangjin.me:3000', { name: 'zhangjin' }, function (data, textStatus, jqXHR) {
                        alert(typeof data);
                    }, 'jsonp'); // 返回类型格式 xml, html, script, json, text, jsonp【跨域脚本必须使用 jsonp】
                    // jsonp 可以看做是对 script 的一种封装
                });
                
                // 可以指定对那些数据类型进行过滤
                // * 表示所有的类型
                // 可用的类型有 xml html script json jsonp text
                // 如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如XML MIME类型就被识别为XML
                // 在1.4中，JSON就会生成一个JavaScript对象，而script则会执行这个脚本

                // 类型映射
                // "xml" : "application/xml, text/xml",
                // "html" : "text/html",
                // "text" : "text/plain",
                // "json" : "application/json, text/javascript",
                // "*" : "*/*",
                // "script" : "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"

                // 其中 text/javascript 同时映射到了  json 和 script

                // 类型转换器 
                //converters: {
 
                //    // Convert anything to text
                //    "* text": window.String,
 
                //    // Text to html (true = no transformation)
                //    "text html": true,
 
                //    // Evaluate text as a json expression
                //    "text json": jQuery.parseJSON,
 
                //    // Parse text as xml
                //    "text xml": jQuery.parseXML
                //}

                var currentRequests = {};
                $.ajaxPrefilter('xml html json text', function (options, originalOptions, jqXHR) {
                    console.log('catch');
                    if (options.abortOnRetry) {
                        if (currentRequests[options.url]) {
                            currentRequests[options.url].abort();
                        }
                        currentRequests[options.url] = jqXHR;
                    }

                    // options 代表所有的参数信息
                    // originalOptions 代表所有自定义的参数信息
                    // 具体参考 json 配置文件

                    // 在 $.ajaxSetup 中传递的自定义对象，将会保存到 options 中

                    // console.log(JSON.stringify(options, null, 2));

                    // 可以修改发送的参数信息
                    // 使用场景【重新设置url】
                    // options.url = "http://mydomain.net/proxy/" + encodeURIComponent(options.url);

                    // 可以将请求重定向到另一个数据类型，并且返回该数据类型
                    // 可使用的数据类型有 xml html script json jsonp text
                    // return 'script';
                });
            });

        </script>



    </div>
</body>
</html>
