使用 chutzpah.json 配置文件

可以将 chutzpah.json 与测试文件放在同级目录下，这样当 Chutzpah运行时，将会读取此配置文件中的信息
如果在当前目录下没有找到chutzpah.json，将会逐级递归向上级目录查找，如果最终没有找到，将会使用
chutzpah.json 中的默认值

扩展：
	可以使用不同的目录下设置不同的chutzpah.json配置，Chutzpah会优先读取当前目录下的配置文件
	这样的机制，可以带来很大的灵活性

配置文件格式：

{
    "Framework": "qunit|jasmine",
    
    "TestFileTimeout": "<Timeout in milliseconds>",
    
    "TestHarnessLocationMode": "TestFileAdjacent|SettingsFileAdjacent|Custom",
    
    "TestHarnessDirectory": "<Path to a folder>",

    "TypeScriptCodeGenTarget" : "ES3|ES5",
    
    "RootReferencePathMode":"DriveRoot|SettingsFileDirectory",
    
    "CodeCoverageIncludes": [],
    
    "CodeCoverageExcludes": []
}

解释：
	Framewrok
		使用那个测试框架(QUnit/Jasmine),如果设置了此值，将会覆写其他的检测方法；使用此配置
		的情况为Chutzpah无法推测出你需要使用的框架，此时你就必须进行显示设置了；如果不设置此项，
		Chutzpah将会进行自动检测(两个框架可以并存)

	TestFileTimeout
		单个文件测试完成的超时时间，以毫秒计算

	TestHarnessLocationMode
		设置生成html测试文件的路径，默认值为 TestFileAdjacent,表示存储在与测试文件同级目录下
		如果设置为 SettingsFileAdjacent ，表示存储在 chutzpah.json文件的同级目录下
		设置为 Custom 表示使用一个自定义的目录(通过下面的 TestHarnessDirectory 进行设置)
		(改变设置后，需要重启VS才会生效)(在.js文件上右键 Open in browser 时才会产生临时的测试文件)

	TestHarnessDirectory
		当TestHarnessLocationMode设置为Custom时，此属性表示测试生成文件的路径，可以使用相对或
		绝对路径,使用相对路径时，是相对于当前的测试文件(而不是当前的chutzpah.json配置文件)
		(改变设置后，需要重启VS才会生效)

	TypeScriptCodeGenTarget
		告诉TypeScript 编译器 以那种 Javscript版本验证你的代码 ES3 表示 ECMAScript3,ES5表示ECMAScript5

	RootReferencePathMode
		设置引用文件的根目录，默认值为 DriveRoot ,如果你代码文件中设置为 <reference path="\a.js" />
		假设你在C盘上运行测试，则此时Chutzpah将会查找 c:\a.js;
		如果设置为 SettingsFileDirectory ，Chutzpah将会相对于 chutzpah.json的文件目录来查找a.js文件

	CodeCoverageIncludes
		设置计算代码覆盖率需要包含的文件，如果不设置，将会包含所有的文件
		示例
			"CodeCoverageIncludes": ["*query.js", "*\\dog.js"]
			表示包含以query.js命名结尾的文件 或者 以dog.js命名的文件
			

	CodeCoverageExcludes
		设置计算代码覆盖率需要排除的文件，如果不设置，将不会排除任何文件
		示例 
			"CodeCoverageExcludes": ["*\\jquery.js"]
			表示排除以jquery.js命名的文件
		
/**********************************************************/

Chutzpah File Reference

设置引用单个文
	/// <reference path="someDependency.js" />
设置引用这个目录下的文件
	/// <reference path="some/folder" />
对于 Visual Studio 的 js 智能感知，使用的也是此语法，为了避免 Chutzpah 引用智能感知的文件，可以设置 chutzpah-exclude="true"
	/// <reference path="jQuery-vsdoc.js" chutzpah-exclude="true" />
	
reference语法同样也适用于 TypeScript 编译器 引用文件，这样就会导致 
Chutzpah期望引用 implementation files，而 TypeScript期望引用 definition files
解决此问题的方法为，使用 Chutzpah 指定引用命令的版本
/// <chutzpah_reference path="someDependenty.js" />
使用此配置后，其工作方式与前面的引用一样，只是 TypeScript 和 Visual Studio 会忽略此文件


/***  注意  ***/
对chutzpah.json中的配置更改后(例如TestHarnessDirectory)，需要重启 Visual Studio 后才生效

相对路径表示法一定要用 /, 而不要用 \,如 ../harness 测试ok, ..\harness 则失败

使用绝对路径设置 TestHarnessDirectory 属性时，一定要转义  TestHarnessDirectory 
例如路径D:\IISSite\DemoSite\Chutzpah\harness 需要设置为 D:\\IISSite\\DemoSite\\Chutzpah\\harness

chutzpah.json 配置文件不是从外向内经行合并的，而是判断在当前的测试文件同级目录下是否有配置文件，
如果没有，则会向父级目录进行查找；如果当前目录下有配置文件，则会读取当前此配置文件，没有设置的值将会使用默认值，
而不会读取父级配置文件中的值

目前Chutzpah使用的是webkit引擎进行测试呈现，所以说跨浏览器还是一个问题，不过以后会添加其它引擎支持
/***  注意  ***/