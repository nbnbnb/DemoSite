<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
	<head>
		<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
		<title>jQuery Ajax</title>
        <link href="/Styles/Site.css" rel="stylesheet" type="text/css" />
        <link href="/Styles/ui-darkness/jquery-ui-1.8.19.custom.css" rel="stylesheet" type="text/css" />
        <script src="/Scripts/jquery-1.4.1-vsdoc.js" type="text/javascript"></script>
        <script src="/Scripts/jquery-ui-1.8.19.custom.min.js" type="text/javascript"></script>
        <script src="/Scripts/myhelper.js" type="text/javascript"></script>
        <script src="/Scripts/json2.js" type="text/javascript"></script>
    </head>
    <body>
        <div class="page">
            <div class="header"></div>
            <div class="main">
                <input type="button" onclick="javascript:location.reload(true);" value="Refresh" />
                <input type="button" id="button_clear_items" value="Clear" />
                <br />
                <br />
                <input type="button" value="Do Ajax load(*)" id="button_ajax_load" />
                <input type="button" value="Do Ajax get(*)" id="button_ajax_get" />
                <input type="button" value="Do Ajax getJSON(*)" id="button_ajax_getJSON" />
                <input type="button" value="Do Ajax getScript" id="button_ajax_getScript" />
                <br />
                <br />
                <input type="button" value="Do Ajax post(*)" id="button_ajax_post" />
                <input type="button" value="Do Ajax getJSON jsonp" id="button_ajax_getJSON_jsonp" />
                <input type="button" value="Do Ajax WebMethod(*)" id="button_ajax_WebMethod" />
                <input type="button" value="Do Ajax Sync(*)" id="button_ajax_Sync" />
                <hr />
                <ul id="ul_message"></ul>
                <div id="div_callback"></div>

            </div>
        </div>



        <div id="dialog-modal" title="Waiting for data" style="display:none;">
	        <p>Loading...</p>
        </div>
        
        <script type="text/javascript">

            // 设置一个跨域url
            // 此站点ip 绑定了 5656, 5657两个端口(默认5656)
            // 测试跨域请求时设置为 5657， 非跨域时  5656
            // 带(*) 为 Firefox12 在跨域请求下有问题
            var file_url = location.protocol + "//" + location.hostname + "/jQueryAjax/";  

            // 在发布版本中 要记得删除 console (IE 6不支持)

            $(function () {
                // 设置按钮的jQuery样式
                $("input[type='button']").button();  

                // 加载导航条
                $(".header").load("/navigator.htm .header #div_nav", null, function () { });
            });

            
            /************  事件按照顺序执行  *************/

            // Ajax 请求开始时执行函数
            $("#ul_message").ajaxStart(function () {
                $("#ul_message").append("<li>ajaxStart" + "------>" + new Date().getTime() + "</li>");

                $("#dialog-modal").dialog({   // 显示模态框
                    height: 140,
                    modal: true
                });
            });

            // 请求发送前执行的函数
            $("#ul_message").ajaxSend(function (event, request, settings) {
                $(this).append("<li>ajaxSend:" + "----->" + new Date().getTime() + "</li>");
            });

            /*********** ajaxSuccess与ajaxError相对应 ***********/
            // Ajax 请求成功时执行函数
            $("#ul_message").ajaxSuccess(function (event, request, settings) {
                $(this).append("<li>ajaxSuccess" + "--->" + new Date().getTime() + "</li>");
            });
            // Ajax 请求发生错误时执行函数
            $("#ul_message").ajaxError(function (event, request, settings) {
                $(this).append("<li>ajaxError->" + settings.url + "->" + new Date().getTime() + "</li>");
                $("#dialog-modal").dialog("destroy");
            });
            /*********************/

            // Ajax 请求执行完成时执行的函数
            $("#ul_message").ajaxComplete(function (event, request, settings) {
                $(this).append("<li>ajaxComplete" + "->" + new Date().getTime() + "</li>");
            });

            // Ajax 请求结束结束时执行函数
            $("#ul_message").ajaxStop(function () {
                $("#msg").append("<li>ajaxStop" + "------>" + new Date().getTime() + "</li>");
                $("#dialog-modal").dialog("destroy");  // 隐藏模态框
            });

            //  用户自定义函数
            var fnClearItems = function () {
                $("#ul_message").html("");
                $("#div_callback").html("");
            };

            // 页面加载时执行的事件
            $(function () {
                $("input[type=button]").button();
            });


            /////////////// 事件绑定 ///////////////////////

            // 事件绑定
            $(function () {

                $("#button_clear_items").bind("click", function (event) {
                    fnClearItems();
                });

                // ajax load
                // 跨域(IE9 OK,Firefox12 No,IE6 OK)
                // 注意缓存问题(在查询参数后面加上时间戳)
                // 不带参数(null) Get方式请求，带参数时 POST方式请求
                $("#button_ajax_load").bind("click", null, function (event) {
                    fnClearItems();
                    $("#div_callback").load(file_url+ "ajax_load.htm?timeStamp=" + new Date().getTime() + " #main_ul", null, function (responseText, textStatux, xhr) {
                    });
                });

                // ajax get
                // 跨域(IE9 OK,Firefox12 No,IE 6 OK)
                // 缓存问题 (IE 特别需要注意,只要Url不变，每次都缓存了)
                $("#button_ajax_get").bind("click", null, function (event) {
                    fnClearItems();
                    $.get(file_url + "ajax_get.ashx?timeStamp=" + new Date().getTime(), null, function (responseText, textStatus) {
                        $("#div_callback").text("Server Time :" + responseText);
                    }, "text");
                });

                //  getJSON
                //  使用的是GET方法请求 
                //  注意设置时间戳
                $("#button_ajax_getJSON").bind("click", null, function (event) {
                    fnClearItems();

                    // 跨域请求 使用 jsonp (不会触发ajaxSend事件)  此处的回调一定需是 jsoncallback
                    // 使用 jsoncallback=? 将会发送给服务器端一个随机的函数名，服务器端通过 jsoncallback 当作键值来取得此函数名称
                    // ? 生成的名称类似为 jsonp1377314164729	
                    // 可以在 jQuery 全局 ajax 中进行设置
                    // 然后组合成 一个方法的调用 如 , 假定 doSomething 为 ? 生成的函数名称
                    // doSomething(val);
                    $.getJSON("http://api.flickr.com/services/feeds/photos_public.gne?tags=dog&tagmode=any&format=json&timestamp=" + new Date().getTime().toString() + "&jsoncallback=?", null, function (data, textStatus) {
                        $.each(data.items, function (i, item) {
                            $("<img/>").attr({
                                src: item.media.m,
                                width: 70,
                                height: 70
                            }).css({
                                border: "1px solid #ccc",
                                padding: "2px"
                            }).appendTo("#div_callback");
                            if (i == 11)   // 只取12张图片
                            {
                                return false;
                            }
                        });
                    });

                    // 同域请求：返回正确的 json 对象 ，textStatus为success
                    // 跨域请求时：data返回值为null, textStatus为success
                    // 注意：由于缓存问题，此处加上了一个时间戳 timeStamp参数，这样每次请求时，就不会认为是同一个请求了，避免缓存问题
                    // 注意：服务端回发 json 字符串的表示方法--> *对象名称*一定需要用双引号(单引号都不行 fk) 如：{ "name":"zhangjin","age":25}  
                    $.getJSON(file_url + "ajax_getJSON.js", { timeStamp: new Date().getTime() }, function (data, textStatus) {
                        // 注意，此行代码将在前面的 跨域请求回调函数前执行 (此返回数据，将附加在 div 最前面)
                        $("<h2>Name:" + data.name + "  Count:" + data.count + "</h2><hr />").appendTo("#div_callback");
                    });
                });

                // getScript
                // 将会直接执行 服务器端脚本中的方法(如果无法信任源，将会有脚本注入攻击)
                // 使用GET方法请求
                // 注意设置时间戳
                // *** 跨域(IE9 OK,Firefox12 OK,IE6 OK) ***
                $("#button_ajax_getScript").bind("click", null, function (event) {
                    fnClearItems();
                    $.getScript(file_url+ "ajax_getScript.js?timeStamp=" + new Date().getTime(), function (data, textStatus) {
                        // 将 ajax_getScript.js中的脚步加载到当前作用域(window)中 并立即执行 

                        // data 参数表示为 脚本的 toString()值 
                        // textStatus 参数表示回调状态
                        //console.info(data);  // var sayName = function () { alert("Hello World!"); }                    
                        //console.info(textStatus);  // success

                        // 以下对象是在服务器端脚本中定义的
                        jQuery.sayHello();  
                        alert(window.timeStamp);
                    });
                });

                // post
                // 使用POST方式请求
                // 这个可以不用关心时间戳
                $("#button_ajax_post").bind("click", null, function (event) {
                    fnClearItems();
                    $.post(file_url + "ajax_post.ashx", { name: "张进" }, function (responseText, textStatus) {
                        //console.info(responseText);
                        //console.info(textStatus);
                        $("#div_callback").html(responseText);
                    }, "text");
                });

                // jsonp
                // 跨域 IE,FireFox OK(本来就是为了解决跨域问题)
                // 此处要注意缓存问题 
                // 因为每次都随机产生一个回调函数，故而可以不添加时间戳
                // 但如果使用固定的回调函数，这必须加上
                // 这个可以在全局 ajax 中进设置
                // 这里为了保持可移植性，加上
                $("#button_ajax_getJSON_jsonp").bind("click", null, function (eventObject) {
                    fnClearItems();
                    // 此时使用?来表示一个随机的回调函数的名称
                    // 然后将指定的回调函数赋值给这个函数指针
                    // 服务器端返回一个类似以下函数执行的字符串
                    // "someMethod(data);"
                    // 然后jQuery将会调用eval将对此字符串进行执行
                    // 所以，最终会调用我们指定的回调函数

                    // 只会触发全局的 ajaxStart ajaxSend  (不会触发 ajaxSuccess)  ajaxComplete 事件
                    // jsonpCallback=? 会产生一个随机的函数名，
                    // 在服务器端通过获取jsonpCallback参数，就可以获得该函数名
                    // 然后用此函数名包装json对象即可
                    $.getJSON(file_url + "ajax_getJSON_jsonp.ashx?jsonpCallback=?", { timeStamp: new Date().getTime() }, function (data) {
                        // data 是一个 json 对象
                        $("#div_callback").html(data.Name);
                    });
                });

                // WebMethod
                // 跨域(IE9 OK ,Firefox12 No,IE6 OK)
                $("#button_ajax_WebMethod").bind("click", null, function (eventObject) {
                    fnClearItems();
                    $.myHelper.getWebMthod(file_url + "ajax_WebMethod.aspx", "GetServerTime", { message: "Hello World!" }, function (oData) {
                        $("#div_callback").html(oData.d);
                    });
                });

                // 一般 ajax都是异步执行，但有时也需要同步
                // 如需要根据一个 ajax 返回的值，执行下一步操作
                // 同步执行  ajax (设置 async 参数)
                $("#button_ajax_Sync").bind("click", null, function (e) {

                    var res = "";

                    fnClearItems();

                    $.ajax(
                    {
                        url: file_url + "ajax_get.ashx",
                        async: false, // 注意此处  是如何设置的 (true:异步执行，false:同步执行) 
                        data: { timeStamp: new Date().getTime() },
                        success: function (data) {                          
                            res = data;
                        }
                    });
                    // 注意 此处 res 将根据 async 设置的不同，而产生不同的结果
                    // async:true; 同步执行，此时 res="";
                    // async:false 异步执行  res 为 异步返回的结果
                    alert(res);

                });
            });

            // jsonp 参考 
            //  http://www.cn-cuckoo.com/2008/09/13/the-origin-of-jsonp-262.html
            //  http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/
            //  http://www.iteye.com/topic/169765

        </script>

    </body>
</html>